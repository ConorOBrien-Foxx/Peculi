const Peculi = (c,O,E={},V={}) => {
    N=(..._)=>O(..._,"\n");q=JSON.stringify;X=Symbol("X");B={"+":"+","-":"-","*":"*","**":"**","^":"**","/":"/","%":"%","|":"|","&":"&","^":"^","<":"<",">":">","<=":"<=",">=":">=","||":"||","&&":"&&","=":"==","==":"==="};F={"!":[1,x=>!x],"_":[1,x=>-x],":":[1,(a,s)=>(s.push(a),a)],"\\":[2,(a,b,s)=>(s.push(b),a)],"f":[1,(p,s,o)=>(f(p,s,o),X)],"?":[3,(a,b,c)=>c?a:b],".":[1,c=>(N(c),X)],"..":[1,c=>(O(c),X)],"??":[0,s=>(N("stack:",s),X)],"???":[0,(s,o)=>(N(s,o),X)],"flush":[0,s=>(s.splice(0),X)],"ns":[1,(d,s,o)=>f(d,[],o)],"map":[2,(a,u,s,o)=>a.map(e=>f(u,[e],o).pop())],"$":[1,_=>X],"++":[2,(a,b)=>(a.map?a:[a]).concat(b)],"wrap":[1,a=>[a]],"@":[2,(a,b)=>a[b]],"fold":[2,(a,u,s,o)=>a.reduce((acc,cur)=>f(u,[acc,cur],o).pop())],"fold-seed":[3,(a,u,i,s,o)=>a.reduce((acc,cur)=>f(u,[acc,cur],o).pop(),i)],"foldr":[2,(a,u,s,o)=>a.reduceRight((acc,cur)=>f(u,[acc,cur],o).pop())],"foldr-seed":[3,(a,u,i,s,o)=>a.reduceRight((acc,cur)=>f(u,[acc,cur],o).pop(),i)],"rev":[1,s=>[...s].reverse()],"join":[2,(a,b)=>a.join(b)],",":[2,(a,b)=>[a,b]],"range":[1,a=>{let v=[];while(a-->0)v[a]=a;return v}],"dyrange":[2,(a,b)=>{let v=[];while(b-->a)v[b-a]=b;return v}],"keep":[2,(a,u,s,o)=>a.filter(e=>f(u,[e],o).pop())],"repr":[1,c=>q(c)],"any":[2,(a,u,s,o)=>a.some(e=>f(u,[e],o).pop())]};Object.assign(F,E);f=(x,s=[],o={})=>(o=Object.assign({},o,{"s-f":f,"s-X":X,"s-q":q}),p=[],d=0,eval(`c=(e,s,o)=>(g=F[e])&&(v=g[1](...(g[0]?s.splice(-g[0]):[]),s,o),v!==X&&s.push(v));\n`+(x.map?x:x.match(/\s+|'[^']*?'|"[^"]*?"|.+?(\s+|$)/g)||[]).map(e=>e.trim()).filter(e=>e).map(e=>d?e[0]=='['?(d++,p.push(e),null):e[0]==']'?--d?(p.push(e),null):[m=p.shift(),m[1]==':'?`s.push(f(${q(p)},[],o))`:`s.push(${q(p)})`,p=[]][1]:(p.push(e),null):e[0]=='['?(d++,p=[e],null):e[0]=='#'?`F[${q(e.slice(1))}]=[0,(_=>(s,o)=>(f(_,s,o),X))(s.pop())]`:e[0]=='@'&&e[1]?`o.${e.slice(1)}=s.pop()`:/^[a-z]/.test(e)?`F[${q(e)}]?c(${q(e)},s,o):s.push(o.${e})`:B[e]?`[a,b]=s.splice(-2);s.push(a${B[e]}b)`:/^-?[0-9]/.test(e)?`s.push(${e})`:/^['"]/.test(e)?`s.push(${q(e.slice(1,-1))})`:`c(${q(e)},s,o)`).filter(e=>e).join`;\n`),{stack:s,space:o});
    return f(c,[],V);
};
if(typeof module !== "undefined") {
    const fs = require("fs");
    const path = require("path");
    const files = {};
    const q={"read":[1,n=>fs.readFileSync(n).toString()],"open":[1,n=>(fs.openSync(n),n)],"write":[2,(n,d)=>{files[n]=files[n]||fs.open(n);fs.writeFileSync(files[n],d);return n}],"close":[1,(n,s,)=>{fs.closeSync(files[n]);filesn[n]=null;return o["s-X"]}],"load":[1,(p,s,o)=>(Object.assign(o,o["s-f"](fs.readFileSync(p+".peculi").toString(),s,q).space),o["s-X"])]};
    module.exports = (c,O,E,V) => Peculi(c,O,Object.assign({},q,E),Object.assign({},V));
}